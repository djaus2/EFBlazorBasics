@page "/fetchdata4"
@using EFBlazorBasics.Data
@inject IHelperService service


<h1>Helper Volunteers - Update Activity - Use Activity Id</h1>

<p>This page demonstrates updating a Db Entity via a service by passing entity Id and new property value.</p>

@if (!((Activitys == null)||(Rounds == null)||(Helpers == null)))
{
<EditForm Model="@values">    
    <table class=" table">
        <tr><large><b>Change an entity property that is of value type.</b></large></tr>
        <tr>
            @if (!(string.IsNullOrEmpty(values.newTask)))
            {
                <td><button @onclick="@UpdateActivity">Update Activity Task via ActivityId</button></td>
            }
            else
            {
                <td><i>Please select existing activity Id and enter new Task value:</i></td>

            }
            <td>
                <b><i>Select Activity Id:</i></b>&nbsp;<InputNumber @bind-Value="values.ActivityId" />
            </td>
            <td>
                <b><i>Revised Task:</i></b>&nbsp;<InputText @bind-Value="values.newTask" />
            </td>
        </tr>
        <tr><large><b>Change an entity property that is also an entity.</b></large></tr>
        <tr>
            @if (CheckHelperId())
            {
                <td><button @onclick="@UpdateActivity3">Update Activity Helper via ActivityId</button></td>
            }
            else
            {
                 <td><i>Please select existing activity Id and its new helper Id:</i></td>
            }
            <td>
                <b><i>Select Activity Id:</i></b>&nbsp;<InputNumber @bind-Value="values.ActivityId" />
            </td>
            <td>
                <b><i>Select Helper Id:</i></b>&nbsp;<InputNumber @bind-Value="values.HelperId" />
            </td>
        </tr>
    </table>
</EditForm>
}
else
{
    <p><em>Loading Activities, Rounds and Helpers...</em></p>
}

<h2>Activitys</h2>
@if (Activitys == null)
{
    <p><em>Loading Activities...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Round</th>
                <th>Helper</th>
                <th>Task</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in Activitys)
            {
                <tr>
                    <td>@activity.Id</td>
                    <td>@activity.Round.No</td>
                    @if (@activity.Helper != null)
                    {
                        <td>@activity.Helper.Name</td>
                    }
                    else
                    {
                        <td>NULL</td>
                    }
                    <td>@activity.Task</td>
                </tr>
            }
        </tbody>
    </table>
}

    

<h2>Helpers</h2>
@if (Helpers == null)
{
    <p><em>Loading Helpers...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hlpr in Helpers)
            {
                <tr>
                    <td>@hlpr.Id</td>
                    <td>@hlpr.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Rounds</h2>
@if (Rounds == null)
{
    <p><em>Loading Rounds...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Round No.</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var round in Rounds)
            {
                <tr>
                    <td>@round.Id</td>
                    <td>@round.No</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Activity> Activitys;
    private List<Helper> Helpers;
    private List<Round> Rounds;

    public class Values {
        public int ActivityId { get; set; } = 1;
        public int RoundId { get; set; } = 1;
        public int HelperId { get; set; } = 0;
        public int  newRoundNo { get; set; } = 0;
        public string newName { get; set; } = "";
        public string newTask { get; set; } = "";
    }


    public Values values { get; set; } = new Values();

    private async Task DeleteRound()
    {
        await service.DeleteRound(values.RoundId);
        await UpdateData();
    }

    private async Task DeleteHelper()
    {
        await service.DeleteHelper(values.HelperId);
        await UpdateData();
    }

    private async Task DeleteActivity()
    {
        await service.DeleteActivity(values.ActivityId);
        await UpdateData();
    }

    async Task UpdateData()
    {
        Activitys = await service.GetActivitys();
        Helpers = await service.GetHelpers();
        Rounds = await service.GetRounds();
    }

    protected override async Task OnInitializedAsync()
    {
        values  = new Values();
        Activitys = await service.GetActivitys();
        if ((Activitys==null) || (Activitys.Count() == 0))
        {
            await service.AddSomeData();
        }
        await UpdateData();

    }

    bool CheckRound()
    {
        if (values.newRoundNo < 1)
            return true;
        List<int> roundNos = (from r in Rounds select r.No).ToList();
        return roundNos.Contains(values.newRoundNo);
    }

    bool CheckHelperId()
    {
        List<int> roundNos = (from r in Helpers select r.Id).ToList();
        return roundNos.Contains(values.HelperId);
    }

    async Task UpdateActivity()
    {
        await service.UpdateActivityTask(values.ActivityId, values.newTask);
        await UpdateData(); ;
    }

    async Task UpdateActivity2()
    {
        Activity activity = (from a in Activitys where a.Id == values.ActivityId select a).FirstOrDefault();
        activity.Task = values.newTask;
        if (activity != null)
        {
            await service.UpdateActivity(activity);
            await UpdateData();
        }
    }

    async Task UpdateActivity3()
    {
        Helper helper = (from h in Helpers where h.Id == values.HelperId select h).FirstOrDefault();
        if (helper != null)
        {
            await service.UpdateActivityHelper(values.ActivityId, helper);
            await UpdateData();
        }
    }

    async Task UpdateActivity4()
    {
        Activity activity = (from a in Activitys where a.Id == values.ActivityId select a).FirstOrDefault();
        if (activity != null)
        {
            activity.Helper = (from h in Helpers where h.Id == values.HelperId select h).FirstOrDefault();
            if (activity.Helper != null)
            {
                await service.UpdateActivity(activity);
                await UpdateData();
            }
        }
    }
}

